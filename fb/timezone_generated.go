// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Coord struct {
	_tab flatbuffers.Struct
}

func (rcv *Coord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Coord) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Coord) Lat() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Coord) MutateLat(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Coord) Lon() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Coord) MutateLon(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func CreateCoord(builder *flatbuffers.Builder, lat float32, lon float32) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.PrependFloat32(lon)
	builder.PrependFloat32(lat)
	return builder.Offset()
}
type Polygon struct {
	_tab flatbuffers.Table
}

func GetRootAsPolygon(buf []byte, offset flatbuffers.UOffsetT) *Polygon {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Polygon{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Polygon) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Polygon) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Polygon) Max(obj *Coord) *Coord {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Coord)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Polygon) Min(obj *Coord) *Coord {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Coord)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Polygon) Coords(obj *Coord, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Polygon) CoordsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PolygonStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PolygonAddMax(builder *flatbuffers.Builder, max flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(max), 0)
}
func PolygonAddMin(builder *flatbuffers.Builder, min flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(min), 0)
}
func PolygonAddCoords(builder *flatbuffers.Builder, coords flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(coords), 0)
}
func PolygonStartCoordsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func PolygonEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type PolygonIndex struct {
	_tab flatbuffers.Table
}

func GetRootAsPolygonIndex(buf []byte, offset flatbuffers.UOffsetT) *PolygonIndex {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PolygonIndex{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PolygonIndex) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PolygonIndex) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PolygonIndex) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PolygonIndex) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *PolygonIndex) Tzid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PolygonIndex) Max(obj *Coord) *Coord {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Coord)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PolygonIndex) Min(obj *Coord) *Coord {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Coord)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PolygonIndexStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PolygonIndexAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func PolygonIndexAddTzid(builder *flatbuffers.Builder, tzid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tzid), 0)
}
func PolygonIndexAddMax(builder *flatbuffers.Builder, max flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(max), 0)
}
func PolygonIndexAddMin(builder *flatbuffers.Builder, min flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(min), 0)
}
func PolygonIndexEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
